name: Github Actions CI/CD pipeline for Building an AMI using Packer
run-name: ${{ github.actor }} Running Github Actions CI/CD pipeline for Building an AMI using Packer

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main
      - feature/*

env:
  AWS_DEFAULT_REGION: 'us-east-1' # Set your default AWS region

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    outputs:
      ami_id: ${{ steps.extract-ami-id.outputs.AMI_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check and Install/Update AWS CLI
      run: |
        if command -v aws &> /dev/null; then
          echo "AWS CLI is already installed."
          CURRENT_VERSION=$(aws --version 2>&1 | cut -d/ -f2 | cut -d' ' -f1)
          LATEST_VERSION=$(curl -s https://api.github.com/repos/aws/aws-cli/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Updating AWS CLI from version $CURRENT_VERSION to $LATEST_VERSION."
            sudo apt-get update
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          else
            echo "AWS CLI is up to date (version $CURRENT_VERSION)."
          fi
        else
          echo "AWS CLI is not installed. Installing now."
          sudo apt-get update
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Initialize and Validate Packer template
      run: |
        packer init aws-ubuntu.pkr.hcl
        packer validate aws-ubuntu.pkr.hcl

    - name: Build AMI
      id: build-ami
      run: |
        LOG_FILE="packer_build.log"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          packer build -var 'ami_tag=production-onyeka-ubuntu' template.pkr.hcl | tee $LOG_FILE
        else
          packer build -var 'ami_tag=testing-onyeka-ubuntu' template.pkr.hcl | tee $LOG_FILE
        fi

    - name: Upload Packer Build Logs
      uses: actions/upload-artifact@v3
      with:
        name: packer-build-logs
        path: packer_build.log

    - name: Extract AMI ID
      id: extract-ami-id
      run: |
        AMI_TAG="production-onyeka-ubuntu"
        if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
          AMI_TAG="testing-onyeka-ubuntu"
        fi
        AMI_ID=$(aws ec2 describe-images --filters "Name=tag:Name,Values=$AMI_TAG" --query "Images[*].[ImageId,CreationDate]" --output text | sort -k2 | tail -n1 | awk '{print $1}')
        
        if [ -z "$AMI_ID" ]; then
         echo "AMI does not exist. Aborting deployment."
         exit 1
        else
          echo "AMI ID: $AMI_ID"
        fi
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
        echo "::set-output name=AMI_ID::$AMI_ID"

  deploy-to-testing:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'

    steps:
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Verify AMI Existence
      run: |
        AMI_ID=${{ needs.build-and-test.outputs.ami_id }}
        if aws ec2 describe-images --image-ids $AMI_ID &> /dev/null; then
          echo "AMI $AMI_ID exists. Proceeding with deployment."
        else
          echo "AMI $AMI_ID does not exist. Aborting deployment."
          exit 1
        fi

    - name: Launch EC2 Instance in Testing Environment
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ needs.build-and-test.outputs.ami_id }} \
          --instance-type t2.micro \
          --security-group-ids sg-01bb736dc58ee3fc4 \
          --key-name onyeka-github-action-afxtern-pod-a \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Testing-onyeka}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "Launched EC2 instance in testing environment with ID: $INSTANCE_ID"

    - name: Notify team
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Build and deployment to testing environment succeeded"
        else
          echo "Build and deployment to testing environment failed"
        fi

  deploy-to-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Verify AMI Existence
      run: |
        AMI_ID=${{ needs.build-and-test.outputs.ami_id }}
        if aws ec2 describe-images --image-ids $AMI_ID &> /dev/null; then
          echo "AMI $AMI_ID exists. Proceeding with deployment."
        else
          echo "AMI $AMI_ID does not exist. Aborting deployment."
          exit 1
        fi

    -  name: Manual Approval
       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
       id: approval
       uses: trstringer/manual-approval@v1
       with:
        approvers: onyeka-hub
        secret: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        minimum-approvals: 1
        issue-title: "Manual approval required for afxtern packer pipeline"
        issue-body: |
          Workflow is pending manual review.
          URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Required approvers: [onyeka]
          Respond "approved", "approve", "lgtm", "yes" to continue workflow or "denied", "deny", "no" to cancel.


    - name: Launch EC2 Instance in Production Environment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && ${{ steps.approval.outputs.approved }} == 'true'
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ needs.build-and-test.outputs.ami_id }} \
          --instance-type t2.micro \
          --security-group-ids sg-01bb736dc58ee3fc4 \
          --key-name onyeka-github-action-afxtern-pod-a \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Production-onyeka}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "Launched EC2 instance in production environment with ID: $INSTANCE_ID"

    - name: Notify team
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Build and deployment to production environment succeeded"
        else
          echo "Build and deployment to production environment failed"
        fi
